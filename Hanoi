// Tower of Hanoi: Iterative Solution
#include <stdio.h>
#include <math.h>

#define SIZE 10

void ab ( int a[], int b[] );
void ac ( int a[], int c[] );
void bc ( int b[], int c[] );

void printPeg ( int a[], int b[], int c[] );

int main ( void )
{
    int disk;
    int order = 1;
    
    int a[ SIZE ] = { 0 };
    int b[ SIZE ] = { 0 };
    int c[ SIZE ] = { 0 };
    
    printf("Enter the number of disk: ");
    scanf("%d", &disk);
    
    for ( int i = disk; i >= 0; i-- ){
        a[ disk - i ] = i;
    } // end for
    
    printPeg ( a, b, c );
    
    for ( order = 1; order <= pow ( 2, disk ) - 1; order++ ){
        
        printf("%d: ", order);
        
        // if the number of disk is even
        if ( 1 == order % 3 && 0 == disk % 2 ){
            ab ( a, b );
        }
        
        if ( 2 == order % 3 && 0 == disk % 2 ){
            ac ( a, c );
        }
        
        if ( 0 == order % 3 && 0 == disk % 2 ){
            bc ( b, c );
        }
        
        // if the number of disk is odd
        if ( 1 == order % 3 && 1 == disk % 2 ){
            ac ( a, c );
        }
        
        if ( 2 == order % 3 && 1 == disk % 2 ){
            ab ( a, b );
        }
        
        if ( 0 == order % 3 && 1 == disk % 2 ){
            bc ( b, c );
        }
        
        printPeg ( a, b, c );
        puts("");
        
    } // end for
    
    printPeg ( a, b, c );
    
} // end main

void ab ( int a[  ], int b[  ] )
{
    int i = 9;
    while ( 0 == *( a + i ) && i != 0 ){
        i--;
    }
    
    int j = 9;
    while ( 0 == *( b + j ) && j != 0 ){
        j--;
    }
    
    if ( 0 == *( b + j ) ){
        *( b + j ) = *( a + i );
        *( a + i ) = 0;
        printf("move disk %d from a to b\n", *( b + j ));
    }
    
    else if ( 0 == *( a + i ) ){
        *( a + i ) = *( b + j );
        *( b + j  ) = 0;
        printf("move disk %d from b to a\n", *( a + i ));
    }
    
    else if ( *( a + i ) > *( b + j ) ){
        *( a + i + 1 ) = *( b + j );
        *( b + j ) = 0;
        printf("move disk %d from b to a\n", *( a + i + 1 ));
    }
    
    else if ( *( a + i ) < *( b + j ) ){
        *( b + j + 1 ) = *( a + i );
        *( a + i ) = 0;
        printf("move disk %d from a to b\n", *( b + j + 1 ));
    }
}

void ac ( int a[  ], int c[  ] )
{
    int i = 9;
    while ( 0 == *( a + i ) && i != 0 ){
        i--;
    }
    
    int j = 9;
    while ( 0 == *( c + j ) && j != 0 ){
        j--;
    }
    
    if ( 0 == *( c + j ) ){
        *( c + j ) = *( a + i );
        *( a + i ) = 0;
        printf("move disk %d from a to c\n", *( c + j ));
    }
    
    else if ( 0 == *( a + i ) ){
        *( a + i ) = *( c + j );
        *( c + j  ) = 0;
        printf("move disk %d from c to a\n", *( a + i ));
    }
    
    else if ( *( a + i ) > *( c + j ) ){
        *( a + i + 1 ) = *( c + j );
        *( c + j ) = 0;
        printf("move disk %d from c to a\n", *( a + i + 1 ));
    }
    
    else if ( *( a + i ) < *( c + j ) ){
        *( c + j + 1 ) = *( a + i );
        *( a + i ) = 0;
        printf("move disk %d from a to c\n", *( c + j + 1 ));
    }
}

void bc ( int b[  ], int c[  ] )
{
    size_t i = 9;
    while ( *( b + i ) == 0 && i != 0){
        i--;
    }
    
    size_t j = 9;
    while ( *( c + j ) == 0 && j != 0){
        j--;
    }
    
    if ( 0 == *( c + j )  ){
        *( c + j ) = *( b + i );
        *( b + i ) = 0;
        printf("move disk %d from b to c\n", *( c + j ));
    }
    
    else if ( 0 == *( b + i ) ){
        *( b + i ) = *( c + j );
        *( c + j  ) = 0;
        printf("move disk %d from c to b\n", *( b + i ));
    }
    
    else if ( *( b + i ) > *( c + j ) ){
        *( b + i + 1 ) = *( c + j );
        *( c + j ) = 0;
        printf("move disk %d from c to b\n", *( b + i + 1 ));
    }
    
    else if ( *( b + i ) < *( c + j ) ){
        *( c + j + 1 ) = *( b + i );
        *( b + i ) = 0;
        printf("move disk %d from b to c\n", *( c + j + 1 ));
    }
}

void printPeg ( int a[], int b[], int c[] )
{
    for ( int j = 0; j < SIZE; j++ ){
        printf("%3d", a[ j ]);
    }
    puts("");
    
    for ( int j = 0; j < SIZE; j++ ){
        printf("%3d", b[ j ]);
    }
    puts("");
    
    for ( int j = 0; j < SIZE; j++ ){
        printf("%3d", c[ j ]);
    }
    puts("");
}








